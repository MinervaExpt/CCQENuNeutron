import ROOT
from ROOT import TMath

tcut=0.17531960
FA0=-1.2723

def theZ(Q2,t0,tcut):
  return (TMath.Sqrt(tcut + Q2) - TMath.Sqrt(tcut - t0))/(TMath.Sqrt(tcut + Q2) + TMath.Sqrt(tcut - t0))

def ZexpN2( Q2, par, t0=-0.78, tcut=0.17531960, scale = 1.):
    a1 = par[0]
    a2 = par[1]
    z=theZ(Q2,t0,tcut)
    #return scale*(-0.5419156561930116 + 1.496308924604084*z - 0.9268081707782181*TMath.Power(z,2) - 0.41754343906773306*TMath.Power(z,3) - 0.020875061273156748*TMath.Power(z,4) + 0.7715624370000356*TMath.Power(z,5) - 0.36072903429199976*TMath.Power(z,6))
    return scale*(-0.5521127963473834 + 1.4545377087633597*z - 0.8003844312119436*TMath.Power(z,2) - 0.30158343583815483*TMath.Power(z,3) - 0.5566282476367209*TMath.Power(z,4) + 1.2595327619031802*TMath.Power(z,5) - 0.5033615596323388*TMath.Power(z,6))

def FitErrorN2( Q2, par, t0=-0.78, tcut=0.17531960, scale = 1.):
  z=theZ(Q2,t0,tcut)
  #return 1.2723*TMath.Sqrt(-0.7859781498074354*(-0.2402185208395547 + z - 5.195629583208906*TMath.Power(z,3) + 9.190166562220039*TMath.Power(z,4) - 6.352133249776031*TMath.Power(z,5) + 1.597814791604453*TMath.Power(z,6))* (0.041996396530804454*(-0.1600281711861122 + TMath.Power(z,2) - 0.799436576277756*TMath.Power(z,3) - 1.201267703375049*TMath.Power(z,4) + 1.761014162700039*TMath.Power(z,5) - 0.600281711861122*TMath.Power(z,6)) - 0.043332634313585236*(-0.2402185208395547 + z - 5.195629583208906*TMath.Power(z,3) + 9.190166562220039*TMath.Power(z,4) - 6.352133249776031*TMath.Power(z,5) + 1.597814791604453*TMath.Power(z,6))) - 0.7859781498074354*(-0.1600281711861122 + TMath.Power(z,2) - 0.799436576277756*TMath.Power(z,3) - 1.201267703375049*TMath.Power(z,4) + 1.761014162700039*TMath.Power(z,5) - 0.600281711861122*TMath.Power(z,6))* (-0.11197247275703322*(-0.1600281711861122 + TMath.Power(z,2) - 0.799436576277756*TMath.Power(z,3) - 1.201267703375049*TMath.Power(z,4) + 1.761014162700039*TMath.Power(z,5) - 0.600281711861122*TMath.Power(z,6)) + 0.04199639653080443*(-0.2402185208395547 + z - 5.195629583208906*TMath.Power(z,3) + 9.190166562220039*TMath.Power(z,4) - 6.352133249776031*TMath.Power(z,5) + 1.597814791604453*TMath.Power(z,6))))
  return 1.2723*TMath.Sqrt(0.0025231463128116845 - 0.006563552670062736*z + 0.012887537822629441*TMath.Power(z,2) - 0.01133289026631109*TMath.Power(z,3) - 0.2284574875156683*TMath.Power(z,4) + 0.8567799123708613*TMath.Power(z,5) - 0.6540957560083794*TMath.Power(z,6) - 2.0598702267856748*TMath.Power(z,7) + 5.754090854252639*TMath.Power(z,8) - 6.596071415692558*TMath.Power(z,9) + 4.100751807971658*TMath.Power(z,10) - 1.3604846445807761*TMath.Power(z,11) + 0.18984271478883052*TMath.Power(z,12))



def Zexp( Q2, par, t0=-0.28, tcut=0.17531960, scale = 1.):
    a1 = par[0]
    a2 = par[1]
    a3 = par[2]
    a4 = par[3]
    z=theZ(Q2,t0,tcut)

    return (-0.5368587367453468 - 0.18236445891156497*a1 - 0.2599025034120824*a2 - 0.06243339493214775*a3 - 0.04159172230772783*a4 + a1*z + a2*TMath.Power(z,2) + a3*TMath.Power(z,3) + a4*TMath.Power(z,4) + (30.064089257739422 - 24.78759030095236*a1 - 5.445459808923386*a2 - 6.503729883799726*a3 - 1.6708635507672416*a4)*TMath.Power(z,5) + (-75.16022314434855 + 58.468975752380906*a1 + 8.613649522308464*a2 + 11.259324709499316*a3 + 0.17715887691810378*a4)*TMath.Power(z,6) + (64.42304840944162 - 48.1162649306122*a1 - 4.811699590550112*a2 - 7.50799260814227*a3 + 0.9910066769273396*a4)*TMath.Power(z,7) + (-18.790055786087137 + 13.617243938095227*a1 + 0.9034123805771159*a2 + 1.8148311773748287*a3 - 0.45571028077047404*a4)*TMath.Power(z,8) )*scale

def FitError(Q2,par,t0=-0.28, tcut=0.17531960, scale=1.):
  c11,c12,c13,c14=par[0]
  c21,c22,c23,c24=par[1]
  c31,c32,c33,c34=par[2]
  c41,c42,c43,c44=par[3]
  z=theZ(Q2,t0,tcut)

  err= TMath.Sqrt(-0.7859781498074354*(-0.18236445891156497 + z - 24.78759030095236*TMath.Power(z,5) + 58.468975752380906*TMath.Power(z,6) - 48.1162649306122*TMath.Power(z,7) + 13.617243938095227*TMath.Power(z,8))* (-0.7859781498074354*c41*(-0.04159172230772783 + TMath.Power(z,4) - 1.6708635507672416*TMath.Power(z,5) + 0.17715887691810378*TMath.Power(z,6) + 0.9910066769273396*TMath.Power(z,7) - 0.45571028077047404*TMath.Power(z,8)) - 0.7859781498074354*c21*(-0.2599025034120824 + TMath.Power(z,2) - 5.445459808923386*TMath.Power(z,5) + 8.613649522308464*TMath.Power(z,6) - 4.811699590550112*TMath.Power(z,7) + 0.9034123805771159*TMath.Power(z,8)) - 0.7859781498074354*c31*(-0.06243339493214775 + TMath.Power(z,3) - 6.503729883799726*TMath.Power(z,5) + 11.259324709499316*TMath.Power(z,6) - 7.50799260814227*TMath.Power(z,7) + 1.8148311773748287*TMath.Power(z,8)) - 0.7859781498074354*c11*(-0.18236445891156497 + z - 24.78759030095236*TMath.Power(z,5) + 58.468975752380906*TMath.Power(z,6) - 48.1162649306122*TMath.Power(z,7) + 13.617243938095227*TMath.Power(z,8))) - 0.7859781498074354*(-0.2599025034120824 + TMath.Power(z,2) - 5.445459808923386*TMath.Power(z,5) + 8.613649522308464*TMath.Power(z,6) - 4.811699590550112*TMath.Power(z,7) + 0.9034123805771159*TMath.Power(z,8))* (-0.7859781498074354*c42*(-0.04159172230772783 + TMath.Power(z,4) - 1.6708635507672416*TMath.Power(z,5) + 0.17715887691810378*TMath.Power(z,6) + 0.9910066769273396*TMath.Power(z,7) - 0.45571028077047404*TMath.Power(z,8)) - 0.7859781498074354*c22*(-0.2599025034120824 + TMath.Power(z,2) - 5.445459808923386*TMath.Power(z,5) + 8.613649522308464*TMath.Power(z,6) - 4.811699590550112*TMath.Power(z,7) + 0.9034123805771159*TMath.Power(z,8)) - 0.7859781498074354*c32*(-0.06243339493214775 + TMath.Power(z,3) - 6.503729883799726*TMath.Power(z,5) + 11.259324709499316*TMath.Power(z,6) - 7.50799260814227*TMath.Power(z,7) + 1.8148311773748287*TMath.Power(z,8)) - 0.7859781498074354*c12*(-0.18236445891156497 + z - 24.78759030095236*TMath.Power(z,5) + 58.468975752380906*TMath.Power(z,6) - 48.1162649306122*TMath.Power(z,7) + 13.617243938095227*TMath.Power(z,8))) - 0.7859781498074354*(-0.06243339493214775 + TMath.Power(z,3) - 6.503729883799726*TMath.Power(z,5) + 11.259324709499316*TMath.Power(z,6) - 7.50799260814227*TMath.Power(z,7) + 1.8148311773748287*TMath.Power(z,8))* (-0.7859781498074354*c43*(-0.04159172230772783 + TMath.Power(z,4) - 1.6708635507672416*TMath.Power(z,5) + 0.17715887691810378*TMath.Power(z,6) + 0.9910066769273396*TMath.Power(z,7) - 0.45571028077047404*TMath.Power(z,8)) - 0.7859781498074354*c23*(-0.2599025034120824 + TMath.Power(z,2) - 5.445459808923386*TMath.Power(z,5) + 8.613649522308464*TMath.Power(z,6) - 4.811699590550112*TMath.Power(z,7) + 0.9034123805771159*TMath.Power(z,8)) - 0.7859781498074354*c33*(-0.06243339493214775 + TMath.Power(z,3) - 6.503729883799726*TMath.Power(z,5) + 11.259324709499316*TMath.Power(z,6) - 7.50799260814227*TMath.Power(z,7) + 1.8148311773748287*TMath.Power(z,8)) - 0.7859781498074354*c13*(-0.18236445891156497 + z - 24.78759030095236*TMath.Power(z,5) + 58.468975752380906*TMath.Power(z,6) - 48.1162649306122*TMath.Power(z,7) + 13.617243938095227*TMath.Power(z,8))) - 0.7859781498074354*(-0.04159172230772783 + TMath.Power(z,4) - 1.6708635507672416*TMath.Power(z,5) + 0.17715887691810378*TMath.Power(z,6) + 0.9910066769273396*TMath.Power(z,7) - 0.45571028077047404*TMath.Power(z,8))* (-0.7859781498074354*c44*(-0.04159172230772783 + TMath.Power(z,4) - 1.6708635507672416*TMath.Power(z,5) + 0.17715887691810378*TMath.Power(z,6) + 0.9910066769273396*TMath.Power(z,7) - 0.45571028077047404*TMath.Power(z,8)) - 0.7859781498074354*c24*(-0.2599025034120824 + TMath.Power(z,2) - 5.445459808923386*TMath.Power(z,5) + 8.613649522308464*TMath.Power(z,6) - 4.811699590550112*TMath.Power(z,7) + 0.9034123805771159*TMath.Power(z,8)) - 0.7859781498074354*c34*(-0.06243339493214775 + TMath.Power(z,3) - 6.503729883799726*TMath.Power(z,5) + 11.259324709499316*TMath.Power(z,6) - 7.50799260814227*TMath.Power(z,7) + 1.8148311773748287*TMath.Power(z,8)) - 0.7859781498074354*c14*(-0.18236445891156497 + z - 24.78759030095236*TMath.Power(z,5) + 58.468975752380906*TMath.Power(z,6) - 48.1162649306122*TMath.Power(z,7) + 13.617243938095227*TMath.Power(z,8)))) 

  return err*abs(scale)*FA0*FA0




def GetGraphErr2( graph, par ):
  n = graph.GetN()
  ret= ROOT.TGraphErrors()
  for i in range(n):
    Q2=graph.GetX()[i]
    ret.SetPoint(i, Q2, Zexp(Q2, par) )
  
  return ret

def GetGraphErr3( graph, par ):
  n = graph.GetN()
  ret= ROOT.TGraphErrors()
  for i in range(n):
    Q2=graph.GetX()[i]
    ret.SetPoint(i, Q2, ZexpN2(Q2, par) )
  
  return ret


def MeyerCV(Q2):
  #return -0.7544996599554552 + (0.6925119015590653*TMath.Power(-0.6747737373238151 + TMath.Sqrt(0.1753196 + Q2),8))/TMath.Power(0.6747737373238151 + TMath.Sqrt(0.1753196 + Q2),8) - (1.0600408053453378*TMath.Power(-0.6747737373238151 + TMath.Sqrt(0.1753196 + Q2),7))/TMath.Power(0.6747737373238151 + TMath.Sqrt(0.1753196 + Q2),7) - (1.6299523937637517*TMath.Power(-0.6747737373238151 + TMath.Sqrt(0.1753196 + Q2),6))/TMath.Power(0.6747737373238151 + TMath.Sqrt(0.1753196 + Q2),6) + (2.5519809575054992*TMath.Power(-0.6747737373238151 + TMath.Sqrt(0.1753196 + Q2),5))/TMath.Power(0.6747737373238151 + TMath.Sqrt(0.1753196 + Q2),5) + (2.3*TMath.Power(-0.6747737373238151 + TMath.Sqrt(0.1753196 + Q2),4))/TMath.Power(0.6747737373238151 + TMath.Sqrt(0.1753196 + Q2),4) - (3.8*TMath.Power(-0.6747737373238151 + TMath.Sqrt(0.1753196 + Q2),3))/TMath.Power(0.6747737373238151 + TMath.Sqrt(0.1753196 + Q2),3) - (0.6*TMath.Power(-0.6747737373238151 + TMath.Sqrt(0.1753196 + Q2),2))/TMath.Power(0.6747737373238151 + TMath.Sqrt(0.1753196 + Q2),2) + (2.3*(-0.6747737373238151 + TMath.Sqrt(0.1753196 + Q2)))/(0.6747737373238151 + TMath.Sqrt(0.1753196 + Q2)) 
  return (-0.4541096590398484 + 1.9539925233402755e-14*TMath.Power(Q2,4) - 5.126706276695963*TMath.Sqrt(0.1753196 + Q2) + Q2*(-1.4397535998531852 - 23.824184045093943*TMath.Sqrt(0.1753196 + Q2)) + TMath.Power(Q2,2)*(6.584433052853172 - 1.700329887875803e-13*TMath.Sqrt(0.1753196 + Q2)) + TMath.Power(Q2,3)*(1.7002232910386852e-13 - 8.348877145181177e-14*TMath.Sqrt(0.1753196 + Q2)))/TMath.Power(0.6747737373238151 + TMath.Sqrt(0.1753196 + Q2),8) 

#def MeyerError(Q2):
#  return 1.2723*TMath.Sqrt((2.676043265977421 + 7.887891266775364e-31*TMath.Power(Q2,8) - 6.391133649071777*TMath.Sqrt(0.1753196 + Q2) + TMath.Power(Q2,2)*(117.42843735460404 - 143.48830950595465*TMath.Sqrt(0.1753196 + Q2)) + TMath.Power(Q2,3)*(167.98419265781618 - 116.73181645952332*TMath.Sqrt(0.1753196 + Q2)) + Q2*(30.327134563028242 - 54.20251570430736*TMath.Sqrt(0.1753196 + Q2)) + TMath.Power(Q2,7)*(1.76807423578193e-28 + 1.2537224710184266e-30*TMath.Sqrt(0.1753196 + Q2)) + TMath.Power(Q2,6)*(6.7759103375720345e-15 + 1.3652805322741727e-28*TMath.Sqrt(0.1753196 + Q2)) + TMath.Power(Q2,4)*(42.14737767889076 + 2.803208321734435e-14*TMath.Sqrt(0.1753196 + Q2)) + TMath.Power(Q2,5)*(-9.910985606529808e-14 + 8.352940728214283e-14*TMath.Sqrt(0.1753196 + Q2)))/TMath.Power(0.6747737373238151 + TMath.Sqrt(0.1753196 + Q2),16))

def MeyerError(Q2):
  return 1.2723*TMath.Sqrt((48.16553597206054 + 2.7703575437751695e-32*TMath.Power(Q2,6) - 115.03266094024747*TMath.Sqrt(0.1753196 + Q2) + Q2*(216.1495628838604 - 188.15950527959424*TMath.Sqrt(0.1753196 + Q2)) + TMath.Power(Q2,5)*(1.384316782126541e-30 - 4.258534398191133e-31*TMath.Sqrt(0.1753196 + Q2)) + TMath.Power(Q2,4)*(-2.3836113512116093e-15 + 1.927422542269863e-30*TMath.Sqrt(0.1753196 + Q2)) + TMath.Power(Q2,2)*(72.11689277850463 + 3.1313514477539442e-15*TMath.Sqrt(0.1753196 + Q2)) + TMath.Power(Q2,3)*(-2.0645422669028412e-14 + 2.3579650712934273e-14*TMath.Sqrt(0.1753196 + Q2)))/TMath.Power(0.9619353390857147 + TMath.Sqrt(0.1753196 + Q2),12)) 

tejin_par = [1.98548, -0.365072, -4.21083, 8.14916]
tejin_cov = [[0.0143244, -0.00346053, -0.11329, 0.151811], [-0.00346053, 0.218173, -0.428504, 0.277579], [-0.11329, -0.428504, 1.98419, -2.29539], [0.151811, 0.277579, -2.29539, 3.60688]]


tejin_par2= [1.42921, -1.05749, 0.0869732, 0.233176]
tejin_cov2= [[0.00319851, -8.4053e-6, -0.0172672, 0.0192075], [-8.4053e-6, 0.0275623, -0.020074, -0.0137733], [-0.0172672, -0.020074, 0.108674, -0.0932364], [0.0192075, -0.0137733, -0.0932364, 0.166342]]

joint_par = [2.32025, -0.613201, -5.47307, 8.24114]
joint_cov = [[0.00283471, 0.00393706, -0.0383547, 0.053355], [0.00393706, 0.16919, -0.37654, 0.249133], [-0.0383547, -0.37654, 1.22638, -1.31461], [0.053355, 0.249133, -1.31461, 2.15037]]
meyer_par = [2.28, 0.25, -5.2, 2.6]
meyer_cov = [[0.0064,0.0266,-0.124752,0.131976],[0.0266,0.9025,-1.96213,0.941355],[-0.124752,-1.96213,5.29,-4.25385],[0.131976,0.941355,-4.25385,7.29]]

meyerT0TCut=[-0.28,0.17531960]
tejin2T0TCut=[-0.78,0.17531960]


